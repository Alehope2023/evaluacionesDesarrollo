{"ast":null,"code":"'use strict';import _defineProperty from\"C:/trabajo/Alehope/actividadesPreBuild/Frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"C:/trabajo/Alehope/actividadesPreBuild/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useLocation}from'react-router-dom';// this verifies if any of the collapses should be default opened on a rerender of this component\nexport var getCollapseInitialState=function getCollapseInitialState(routes){for(var i=0;i<routes.length;i++){if(routes[i].collapse&&getCollapseInitialState(routes[i].views)){return true;}else if(location.pathname===routes[i].layout+routes[i].path){return true;}}return false;};// this creates the intial state of this component based on the collapse routes\n// that it gets through routes\nexport var getCollapseStates=function getCollapseStates(routes){var initialState={};routes.map(function(prop){if(prop.collapse){initialState=_objectSpread(_objectSpread(_defineProperty({},prop.state,getCollapseInitialState(prop.views)),getCollapseStates(prop.views)),initialState);}return null;});return initialState;};// verifies if routeName is the one active (in browser input)\nexport var activeRoute=function activeRoute(routeName){return useLocation().pathname===routeName?'active':'';};","map":{"version":3,"names":["_defineProperty","_objectSpread","useLocation","getCollapseInitialState","routes","i","length","collapse","views","location","pathname","layout","path","getCollapseStates","initialState","map","prop","state","activeRoute","routeName"],"sources":["C:/trabajo/Alehope/actividadesPreBuild/Frontend/src/shared/mappers/routesMappers.js"],"sourcesContent":["'use strict'\r\n\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n// this verifies if any of the collapses should be default opened on a rerender of this component\r\nexport const getCollapseInitialState = (routes) => {\r\n  for (let i = 0; i < routes.length; i++) {\r\n    if (routes[i].collapse && getCollapseInitialState(routes[i].views)) {\r\n      return true\r\n    } else if (location.pathname === routes[i].layout + routes[i].path) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n// this creates the intial state of this component based on the collapse routes\r\n// that it gets through routes\r\nexport const getCollapseStates = (routes) => {\r\n  let initialState = {}\r\n  routes.map((prop) => {\r\n    if (prop.collapse) {\r\n      initialState = {\r\n        [prop.state]: getCollapseInitialState(prop.views),\r\n        ...getCollapseStates(prop.views),\r\n        ...initialState,\r\n      }\r\n    }\r\n    return null\r\n  })\r\n  return initialState\r\n}\r\n\r\n// verifies if routeName is the one active (in browser input)\r\nexport const activeRoute = (routeName) => {\r\n  return useLocation().pathname === routeName ? 'active' : ''\r\n}\r\n"],"mappings":"AAAA,YAAY,QAAAA,eAAA,wHAAAC,aAAA,gHAEZ,OAASC,WAAW,KAAQ,kBAAkB,CAE9C;AACA,MAAO,IAAM,CAAAC,uBAAuB,CAAG,QAA1B,CAAAA,uBAAuBA,CAAIC,MAAM,CAAK,CACjD,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,MAAM,CAACE,MAAM,CAAED,CAAC,EAAE,CAAE,CACtC,GAAID,MAAM,CAACC,CAAC,CAAC,CAACE,QAAQ,EAAIJ,uBAAuB,CAACC,MAAM,CAACC,CAAC,CAAC,CAACG,KAAK,CAAC,CAAE,CAClE,MAAO,KAAI,CACb,CAAC,IAAM,IAAIC,QAAQ,CAACC,QAAQ,GAAKN,MAAM,CAACC,CAAC,CAAC,CAACM,MAAM,CAAGP,MAAM,CAACC,CAAC,CAAC,CAACO,IAAI,CAAE,CAClE,MAAO,KAAI,CACb,CACF,CACA,MAAO,MAAK,CACd,CAAC,CAED;AACA;AACA,MAAO,IAAM,CAAAC,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAIT,MAAM,CAAK,CAC3C,GAAI,CAAAU,YAAY,CAAG,CAAC,CAAC,CACrBV,MAAM,CAACW,GAAG,CAAC,SAACC,IAAI,CAAK,CACnB,GAAIA,IAAI,CAACT,QAAQ,CAAE,CACjBO,YAAY,CAAAb,aAAA,CAAAA,aAAA,CAAAD,eAAA,IACTgB,IAAI,CAACC,KAAK,CAAGd,uBAAuB,CAACa,IAAI,CAACR,KAAK,CAAC,EAC9CK,iBAAiB,CAACG,IAAI,CAACR,KAAK,CAAC,EAC7BM,YAAY,CAChB,CACH,CACA,MAAO,KAAI,CACb,CAAC,CAAC,CACF,MAAO,CAAAA,YAAY,CACrB,CAAC,CAED;AACA,MAAO,IAAM,CAAAI,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,SAAS,CAAK,CACxC,MAAO,CAAAjB,WAAW,EAAE,CAACQ,QAAQ,GAAKS,SAAS,CAAG,QAAQ,CAAG,EAAE,CAC7D,CAAC"},"metadata":{},"sourceType":"module"}